<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/AudioEngine.swift">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/AudioEngine.swift" />
              <option name="updatedContent" value="import Foundation&#10;import AVFoundation&#10;&#10;class AudioEngine {&#10;    private let engine = AVAudioEngine()&#10;    private let sequencer: AVAudioSequencer&#10;    private let sampler = AVAudioUnitSampler()&#10;    private let steps = 16&#10;    private var track: AVMusicTrack?&#10;    &#10;    init() {&#10;        sequencer = AVAudioSequencer(audioEngine: engine)&#10;        engine.attach(sampler)&#10;        engine.connect(sampler, to: engine.mainMixerNode, format: nil)&#10;        setupSequencer()&#10;    }&#10;    &#10;    private func setupSequencer() {&#10;        track = sequencer.newTrack()&#10;        track?.destinationAudioUnit = sampler&#10;        // Create a 16-step pattern (1 bar, 16th notes)&#10;        let tempo = 120.0&#10;        let beatsPerBar = 4.0&#10;        let stepsPerBeat = 4.0&#10;        let stepLength = 1.0 / stepsPerBeat&#10;        sequencer.tempoTrack?.add(AVMusicEventType.tempo(tempo), at: 0)&#10;        for i in 0..&lt;steps {&#10;            let time = MusicTimeStamp(Double(i) * stepLength)&#10;            // Example: every 4th step is active&#10;            if i % 4 == 0 {&#10;                let note = UInt8(60) // Middle C&#10;                let velocity = UInt8(100)&#10;                let duration = Float(stepLength)&#10;                track?.add(note: note, velocity: velocity, position: time, duration: duration)&#10;            }&#10;        }&#10;        sequencer.prepareToPlay()&#10;    }&#10;    &#10;    func start() throws {&#10;        if !engine.isRunning {&#10;            try engine.start()&#10;        }&#10;        try sequencer.start()&#10;    }&#10;    &#10;    func stop() {&#10;        sequencer.stop()&#10;        engine.stop()&#10;    }&#10;    &#10;    // For timing accuracy testing: log current position&#10;    func logCurrentPosition() {&#10;        let pos = sequencer.currentPositionInBeats&#10;        print(&quot;Sequencer position: \(pos)&quot;)&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/MusicCollab/ContentView.swift">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/MusicCollab/ContentView.swift" />
              <option name="originalContent" value="import SwiftUI&#10;&#10;struct ContentView: View {&#10;    var body: some View {&#10;        Text(&quot;Welcome to MusicCollab!&quot;)&#10;            .font(.largeTitle)&#10;            .padding()&#10;        // This view is now a placeholder and not used in the main app flow.&#10;    }&#10;}&#10;&#10;// New Views for Epic 1 navigation skeleton&#10;struct OnboardingView: View {&#10;    var onComplete: () -&gt; Void&#10;    @State private var nickname: String = UserDefaults.standard.string(forKey: &quot;nickname&quot;) ?? &quot;&quot;&#10;&#10;    var body: some View {&#10;        NavigationStack {&#10;            VStack(spacing: 24) {&#10;                Text(&quot;Welcome!&quot;)&#10;                    .font(.largeTitle.bold())&#10;                Text(&quot;Pick a nickname to get started&quot;)&#10;                    .foregroundStyle(.secondary)&#10;                TextField(&quot;Nickname&quot;, text: $nickname)&#10;                    .autocapitalization(.none)&#10;                    .disableAutocorrection(true)&#10;                    .padding()&#10;                    .background(Color.gray.opacity(0.12))&#10;                    .clipShape(RoundedRectangle(cornerRadius: 12))&#10;                Button(action: saveAndContinue) {&#10;                    Text(&quot;Continue&quot;)&#10;                        .frame(maxWidth: .infinity)&#10;                        .padding()&#10;                        .background(nickname.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty ? Color.gray : Color.accentColor)&#10;                        .foregroundColor(.white)&#10;                        .clipShape(RoundedRectangle(cornerRadius: 12))&#10;                }&#10;                .disabled(nickname.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty)&#10;            }&#10;            .padding(24)&#10;            .navigationTitle(&quot;Onboarding&quot;)&#10;        }&#10;    }&#10;&#10;    private func saveAndContinue() {&#10;        let trimmed = nickname.trimmingCharacters(in: .whitespacesAndNewlines)&#10;        guard !trimmed.isEmpty else { return }&#10;        UserDefaults.standard.set(trimmed, forKey: &quot;nickname&quot;)&#10;        if UserDefaults.standard.string(forKey: &quot;userId&quot;) == nil {&#10;            UserDefaults.standard.set(UUID().uuidString, forKey: &quot;userId&quot;)&#10;        }&#10;        onComplete()&#10;    }&#10;}&#10;&#10;struct RoomView: View {&#10;    @State private var rooms: [String] = [&quot;Room Alpha&quot;, &quot;Room Bravo&quot;, &quot;Room Charlie&quot;]&#10;&#10;    var body: some View {&#10;        NavigationStack {&#10;            List(rooms, id: \.self) { room in&#10;                NavigationLink(destination: SequencerView(roomName: room)) {&#10;                    HStack {&#10;                        Image(systemName: &quot;music.note.list&quot;)&#10;                        Text(room)&#10;                    }&#10;                }&#10;            }&#10;            .navigationTitle(&quot;Rooms&quot;)&#10;        }&#10;        }&#10;    }&#10;}&#10;&#10;struct SequencerView: View {&#10;    let roomName: String&#10;    var body: some View {&#10;        VStack(spacing: 16) {&#10;            Text(&quot;Sequencer&quot;)&#10;                .font(.title.bold())&#10;            Text(&quot;Room: \(roomName)&quot;)&#10;                .foregroundStyle(.secondary)&#10;            Text(&quot;Coming soonâ€¦&quot;)&#10;                .padding()&#10;            // Placeholder transport&#10;            HStack(spacing: 24) {&#10;                Button {&#10;                    print(&quot;Play tapped&quot;)&#10;                } label: {&#10;                    Label(&quot;Play&quot;, systemImage: &quot;play.fill&quot;)&#10;                }&#10;                Button {&#10;                    print(&quot;Stop tapped&quot;)&#10;                } label: {&#10;                    Label(&quot;Stop&quot;, systemImage: &quot;stop.fill&quot;)&#10;                }&#10;            }&#10;        }&#10;        .navigationTitle(&quot;Sequencer&quot;)&#10;    }&#10;}&#10;struct ContentView_Previews: PreviewProvider {&#10;    static var previews: some View {&#10;&#10;struct ContentView_Previews: PreviewProvider {&#10;    static var previews: some View {&#10;}&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;        .padding()&#10;    }&#10;}&#10;&#10;&#10;&#10;&#10;&#10;" />
              <option name="updatedContent" value="import SwiftUI&#10;&#10;struct ContentView: View {&#10;    var body: some View {&#10;        Text(&quot;Welcome to MusicCollab!&quot;)&#10;            .font(.largeTitle)&#10;            .padding()&#10;    }&#10;}&#10;&#10;struct OnboardingView: View {&#10;    var onComplete: () -&gt; Void&#10;    @State private var nickname: String = UserDefaults.standard.string(forKey: &quot;nickname&quot;) ?? &quot;&quot;&#10;&#10;    var body: some View {&#10;        NavigationView {&#10;            VStack(spacing: 20) {&#10;                Text(&quot;Welcome!&quot;)&#10;                    .font(.largeTitle.bold())&#10;                Text(&quot;Pick a nickname to get started&quot;)&#10;                    .foregroundColor(.secondary)&#10;                TextField(&quot;Nickname&quot;, text: $nickname)&#10;                    .textFieldStyle(.roundedBorder)&#10;                Button(action: saveAndContinue) {&#10;                    Text(&quot;Continue&quot;)&#10;                        .frame(maxWidth: .infinity)&#10;                        .padding()&#10;                        .background(nickname.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty ? Color.gray : Color.accentColor)&#10;                        .foregroundColor(.white)&#10;                        .cornerRadius(10)&#10;                }&#10;                .disabled(nickname.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty)&#10;                Spacer()&#10;            }&#10;            .padding()&#10;            .navigationTitle(&quot;Onboarding&quot;)&#10;        }&#10;    }&#10;&#10;    private func saveAndContinue() {&#10;        let trimmed = nickname.trimmingCharacters(in: .whitespacesAndNewlines)&#10;        guard !trimmed.isEmpty else { return }&#10;        UserDefaults.standard.set(trimmed, forKey: &quot;nickname&quot;)&#10;        if UserDefaults.standard.string(forKey: &quot;userId&quot;) == nil {&#10;            UserDefaults.standard.set(UUID().uuidString, forKey: &quot;userId&quot;)&#10;        }&#10;        onComplete()&#10;    }&#10;}&#10;&#10;struct RoomView: View {&#10;    @State private var rooms: [String] = [&quot;Room Alpha&quot;, &quot;Room Bravo&quot;, &quot;Room Charlie&quot;]&#10;&#10;    var body: some View {&#10;        NavigationView {&#10;            List(rooms, id: \.self) { room in&#10;                NavigationLink(destination: SequencerView(roomName: room)) {&#10;                    HStack {&#10;                        Image(systemName: &quot;music.note.list&quot;)&#10;                        Text(room)&#10;                    }&#10;                }&#10;            }&#10;            .navigationTitle(&quot;Rooms&quot;)&#10;        }&#10;    }&#10;}&#10;&#10;struct SequencerView: View {&#10;    let roomName: String&#10;&#10;    var body: some View {&#10;        VStack(spacing: 16) {&#10;            Text(&quot;Sequencer&quot;)&#10;                .font(.title.bold())&#10;            Text(&quot;Room: \(roomName)&quot;)&#10;                .foregroundColor(.secondary)&#10;            Spacer()&#10;            HStack(spacing: 24) {&#10;                Button {&#10;                    print(&quot;Play tapped&quot;)&#10;                } label: {&#10;                    Label(&quot;Play&quot;, systemImage: &quot;play.fill&quot;)&#10;                }&#10;                Button {&#10;                    print(&quot;Stop tapped&quot;)&#10;                } label: {&#10;                    Label(&quot;Stop&quot;, systemImage: &quot;stop.fill&quot;)&#10;                }&#10;            }&#10;            .padding(.bottom, 40)&#10;        }&#10;        .padding()&#10;        .navigationTitle(&quot;Sequencer&quot;)&#10;    }&#10;}&#10;&#10;struct ContentView_Previews: PreviewProvider {&#10;    static var previews: some View {&#10;        ContentView()&#10;            .previewDisplayName(&quot;ContentView&quot;)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/MusicCollab/Managers/AudioManager.swift">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/MusicCollab/Managers/AudioManager.swift" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="import Foundation&#10;import AVFoundation&#10;&#10;final class AudioManager: ObservableObject {&#10;    static let shared = AudioManager()&#10;&#10;    private let engine = AVAudioEngine()&#10;    private var isStarted = false&#10;&#10;    private init() {}&#10;&#10;    func startEngine() {&#10;        guard !isStarted else { return }&#10;        do {&#10;            try configureAudioSession()&#10;            try engine.start()&#10;            isStarted = true&#10;            print(&quot;Audio engine started&quot;)&#10;        } catch {&#10;            print(&quot;Audio engine failed to start: \(error)&quot;)&#10;        }&#10;    }&#10;&#10;    func stopEngine() {&#10;        guard isStarted else { return }&#10;        engine.stop()&#10;        isStarted = false&#10;        print(&quot;Audio engine stopped&quot;)&#10;    }&#10;&#10;    private func configureAudioSession() throws {&#10;        #if os(iOS)&#10;        let session = AVAudioSession.sharedInstance()&#10;        try session.setCategory(.playback, mode: .default, options: [.mixWithOthers, .defaultToSpeaker])&#10;        try session.setPreferredSampleRate(44_100)&#10;        try session.setPreferredIOBufferDuration(0.005)&#10;        try session.setActive(true)&#10;        #else&#10;        // No-op on non-iOS platforms&#10;        #endif&#10;    }&#10;&#10;    var mainMixer: AVAudioMixerNode { engine.mainMixerNode }&#10;    var avEngine: AVAudioEngine { engine }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/MusicCollab/Managers/CollaborationManager.swift">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/MusicCollab/Managers/CollaborationManager.swift" />
              <option name="updatedContent" value="// filepath: /Users/talisviirpalu/coding/MusicCollab/MusicCollab/Managers/CollaborationManager.swift&#10;import Foundation&#10;&#10;final class CollaborationManager: ObservableObject {&#10;    static let shared = CollaborationManager()&#10;&#10;    @Published var connectedRoomId: String? = nil&#10;&#10;    private init() {}&#10;&#10;    func connect(to roomId: String) {&#10;        connectedRoomId = roomId&#10;        print(&quot;Connected to room: \(roomId)&quot;)&#10;    }&#10;&#10;    func disconnect() {&#10;        print(&quot;Disconnected from room: \(connectedRoomId ?? &quot;-&quot;)&quot;)&#10;        connectedRoomId = nil&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/MusicCollab/Managers/ProjectManager.swift">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/MusicCollab/Managers/ProjectManager.swift" />
              <option name="updatedContent" value="// filepath: /Users/talisviirpalu/coding/MusicCollab/MusicCollab/Managers/ProjectManager.swift&#10;import Foundation&#10;&#10;final class ProjectManager: ObservableObject {&#10;    static let shared = ProjectManager()&#10;&#10;    @Published var currentProjectName: String? = nil&#10;&#10;    private init() {}&#10;&#10;    func createNewProject(named name: String) {&#10;        currentProjectName = name&#10;        print(&quot;Project created: \(name)&quot;)&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/MusicCollab/MusicCollabApp.swift">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/MusicCollab/MusicCollabApp.swift" />
              <option name="originalContent" value="//&#10;//  MusicCollabApp.swift&#10;//  MusicCollab&#10;//&#10;//  Created by Talis Viirpalu on 06.11.2024.&#10;//&#10;&#10;import SwiftUI&#10;&#10;@main&#10;struct MusicCollabApp: App {&#10;    @State private var isOnboarded: Bool = {&#10;        let nickname = UserDefaults.standard.string(forKey: &quot;nickname&quot;)&#10;        return nickname != nil &amp;&amp; !nickname!.isEmpty&#10;    }()&#10;&#10;    var body: some Scene {&#10;        WindowGroup {&#10;            if isOnboarded {&#10;                RoomView()&#10;            } else {&#10;                OnboardingView {&#10;                    self.isOnboarded = true&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    init() {&#10;        AudioManager.shared.startEngine()&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="//&#10;//  MusicCollabApp.swift&#10;//  MusicCollab&#10;//&#10;//  Created by Talis Viirpalu on 06.11.2024.&#10;//&#10;&#10;import SwiftUI&#10;&#10;#if os(iOS)&#10;@main&#10;struct MusicCollabApp: App {&#10;    @State private var isOnboarded: Bool = {&#10;        let nickname = UserDefaults.standard.string(forKey: &quot;nickname&quot;)&#10;        return nickname != nil &amp;&amp; !nickname!.isEmpty&#10;    }()&#10;&#10;    var body: some Scene {&#10;        WindowGroup {&#10;            if isOnboarded {&#10;                RoomView()&#10;            } else {&#10;                OnboardingView {&#10;                    self.isOnboarded = true&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    init() {&#10;        AudioManager.shared.startEngine()&#10;    }&#10;}&#10;#endif" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/MusicCollab/Sound.swift">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/MusicCollab/Sound.swift" />
              <option name="originalContent" value="import SwiftUI&#10;&#10;enum Sound: String, CaseIterable, Hashable {&#10;    case kick&#10;    case snare&#10;    case hiHat&#10;    case hiHat2&#10;&#10;    var displayName: String {&#10;        switch self {&#10;        case .kick: return &quot;Kick&quot;&#10;        case .snare: return &quot;Snare&quot;&#10;        case .hiHat: return &quot;Hi-Hat&quot;&#10;        case .hiHat2: return &quot;Hi-Hat 2&quot;&#10;        }&#10;    }&#10;&#10;    var color: Color {&#10;        switch self {&#10;        case .kick: return .red&#10;        case .snare: return .blue&#10;        case .hiHat: return .yellow&#10;        case .hiHat2: return .orange&#10;        }&#10;    }&#10;&#10;    var defaultVolume: Float {&#10;        switch self {&#10;        case .kick: return 1.0&#10;        case .snare: return 0.8&#10;        case .hiHat: return 0.6&#10;        case .hiHat2: return 0.6&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="import SwiftUI&#10;&#10;enum Sound: String, CaseIterable, Hashable {&#10;    case kick&#10;    case snare&#10;    case hiHat&#10;    case hiHat2&#10;&#10;    var displayName: String {&#10;        switch self {&#10;        case .kick: return &quot;Kick&quot;&#10;        case .snare: return &quot;Snare&quot;&#10;        case .hiHat: return &quot;Hi-Hat&quot;&#10;        case .hiHat2: return &quot;Hi-Hat 2&quot;&#10;        }&#10;    }&#10;&#10;    var color: Color {&#10;        switch self {&#10;        case .kick: return .red&#10;        case .snare: return .blue&#10;        case .hiHat: return .yellow&#10;        case .hiHat2: return .orange&#10;        }&#10;    }&#10;&#10;    var defaultVolume: Float {&#10;        switch self {&#10;        case .kick: return 1.0&#10;        case .snare: return 0.8&#10;        case .hiHat: return 0.6&#10;        case .hiHat2: return 0.6&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>