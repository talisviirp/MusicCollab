<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/AudioEngine.swift">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/AudioEngine.swift" />
              <option name="updatedContent" value="import Foundation&#10;import AVFoundation&#10;&#10;class AudioEngine {&#10;    private let engine = AVAudioEngine()&#10;    private let sequencer: AVAudioSequencer&#10;    private let sampler = AVAudioUnitSampler()&#10;    private let steps = 16&#10;    private var track: AVMusicTrack?&#10;    &#10;    init() {&#10;        sequencer = AVAudioSequencer(audioEngine: engine)&#10;        engine.attach(sampler)&#10;        engine.connect(sampler, to: engine.mainMixerNode, format: nil)&#10;        setupSequencer()&#10;    }&#10;    &#10;    private func setupSequencer() {&#10;        track = sequencer.newTrack()&#10;        track?.destinationAudioUnit = sampler&#10;        // Create a 16-step pattern (1 bar, 16th notes)&#10;        let tempo = 120.0&#10;        let beatsPerBar = 4.0&#10;        let stepsPerBeat = 4.0&#10;        let stepLength = 1.0 / stepsPerBeat&#10;        sequencer.tempoTrack?.add(AVMusicEventType.tempo(tempo), at: 0)&#10;        for i in 0..&lt;steps {&#10;            let time = MusicTimeStamp(Double(i) * stepLength)&#10;            // Example: every 4th step is active&#10;            if i % 4 == 0 {&#10;                let note = UInt8(60) // Middle C&#10;                let velocity = UInt8(100)&#10;                let duration = Float(stepLength)&#10;                track?.add(note: note, velocity: velocity, position: time, duration: duration)&#10;            }&#10;        }&#10;        sequencer.prepareToPlay()&#10;    }&#10;    &#10;    func start() throws {&#10;        if !engine.isRunning {&#10;            try engine.start()&#10;        }&#10;        try sequencer.start()&#10;    }&#10;    &#10;    func stop() {&#10;        sequencer.stop()&#10;        engine.stop()&#10;    }&#10;    &#10;    // For timing accuracy testing: log current position&#10;    func logCurrentPosition() {&#10;        let pos = sequencer.currentPositionInBeats&#10;        print(&quot;Sequencer position: \(pos)&quot;)&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/MusicCollab/Managers/CollaborationManager.swift">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/MusicCollab/Managers/CollaborationManager.swift" />
              <option name="updatedContent" value="// filepath: /Users/talisviirpalu/coding/MusicCollab/MusicCollab/Managers/CollaborationManager.swift&#10;import Foundation&#10;&#10;final class CollaborationManager: ObservableObject {&#10;    static let shared = CollaborationManager()&#10;&#10;    @Published var connectedRoomId: String? = nil&#10;&#10;    private init() {}&#10;&#10;    func connect(to roomId: String) {&#10;        connectedRoomId = roomId&#10;        print(&quot;Connected to room: \(roomId)&quot;)&#10;    }&#10;&#10;    func disconnect() {&#10;        print(&quot;Disconnected from room: \(connectedRoomId ?? &quot;-&quot;)&quot;)&#10;        connectedRoomId = nil&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/MusicCollab/Managers/ProjectManager.swift">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/MusicCollab/Managers/ProjectManager.swift" />
              <option name="updatedContent" value="// filepath: /Users/talisviirpalu/coding/MusicCollab/MusicCollab/Managers/ProjectManager.swift&#10;import Foundation&#10;&#10;final class ProjectManager: ObservableObject {&#10;    static let shared = ProjectManager()&#10;&#10;    @Published var currentProjectName: String? = nil&#10;&#10;    private init() {}&#10;&#10;    func createNewProject(named name: String) {&#10;        currentProjectName = name&#10;        print(&quot;Project created: \(name)&quot;)&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/MusicCollab/Sound.swift">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/MusicCollab/Sound.swift" />
              <option name="originalContent" value="import SwiftUI&#10;&#10;enum Sound: String, CaseIterable, Hashable {&#10;    case kick&#10;    case snare&#10;    case hiHat&#10;    case hiHat2&#10;&#10;    var displayName: String {&#10;        switch self {&#10;        case .kick: return &quot;Kick&quot;&#10;        case .snare: return &quot;Snare&quot;&#10;        case .hiHat: return &quot;Hi-Hat&quot;&#10;        case .hiHat2: return &quot;Hi-Hat 2&quot;&#10;        }&#10;    }&#10;&#10;    var color: Color {&#10;        switch self {&#10;        case .kick: return .red&#10;        case .snare: return .blue&#10;        case .hiHat: return .yellow&#10;        case .hiHat2: return .orange&#10;        }&#10;    }&#10;&#10;    var defaultVolume: Float {&#10;        switch self {&#10;        case .kick: return 1.0&#10;        case .snare: return 0.8&#10;        case .hiHat: return 0.6&#10;        case .hiHat2: return 0.6&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="import SwiftUI&#10;&#10;enum Sound: String, CaseIterable, Hashable {&#10;    case kick&#10;    case snare&#10;    case hiHat&#10;    case hiHat2&#10;&#10;    var displayName: String {&#10;        switch self {&#10;        case .kick: return &quot;Kick&quot;&#10;        case .snare: return &quot;Snare&quot;&#10;        case .hiHat: return &quot;Hi-Hat&quot;&#10;        case .hiHat2: return &quot;Hi-Hat 2&quot;&#10;        }&#10;    }&#10;&#10;    var color: Color {&#10;        switch self {&#10;        case .kick: return .red&#10;        case .snare: return .blue&#10;        case .hiHat: return .yellow&#10;        case .hiHat2: return .orange&#10;        }&#10;    }&#10;&#10;    var defaultVolume: Float {&#10;        switch self {&#10;        case .kick: return 1.0&#10;        case .snare: return 0.8&#10;        case .hiHat: return 0.6&#10;        case .hiHat2: return 0.6&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>